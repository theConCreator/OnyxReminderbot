import os
import re
import sqlite3
import logging
import asyncio
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ConversationHandler,
    ContextTypes,
    filters
)
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from dotenv import load_dotenv

# === Load env vars ===
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
DB_FILE = "reminders.db"

# === Logging ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === Conversation states ===
GET_TEXT, GET_TIME, GET_EFFECT = range(3)

# === Scheduler ===
scheduler = AsyncIOScheduler()

# === Keyboards ===
start_menu = InlineKeyboardMarkup([
    [InlineKeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data="new")],
    [InlineKeyboardButton("üìã –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="list")]
])

persistent_kb = ReplyKeyboardMarkup(
    [["üìù –ù–æ–≤–æ–µ", "üìã –°–ø–∏—Å–æ–∫"]],
    resize_keyboard=True
)

# === DB init ===
def init_db():
    with sqlite3.connect(DB_FILE) as conn:
        conn.execute(
            """
            CREATE TABLE IF NOT EXISTS reminders (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                text TEXT,
                time TEXT,
                effect TEXT
            )
            """
        )

# === Save to DB ===
def save_reminder(user_id, text, iso_time, effect):
    with sqlite3.connect(DB_FILE) as conn:
        cur = conn.execute(
            "INSERT INTO reminders (user_id, text, time, effect) VALUES (?, ?, ?, ?)",
            (user_id, text, iso_time, effect)
        )
        conn.commit()
        return cur.lastrowid

# === Parse time input ===
def parse_time_string(s: str) -> datetime | None:
    s = s.strip().lower()
    now = datetime.now()

    patterns = [
        (r"—á–µ—Ä–µ–∑\s+(\d+)\s*(–¥–Ω–µ–π|–¥–Ω—è|–¥–Ω)", 'days'),
        (r"—á–µ—Ä–µ–∑\s+(\d+)\s*(—á–∞—Å–æ–≤|—á–∞—Å–∞|—á)", 'hours'),
        (r"—á–µ—Ä–µ–∑\s+(\d+)\s*(–º–∏–Ω—É—Ç|–º–∏–Ω—É—Ç—ã|–º–∏–Ω|–º)", 'minutes'),
        (r"in\s+(\d+)\s*(days?|d)", 'days'),
        (r"in\s+(\d+)\s*(hours?|h)", 'hours'),
        (r"in\s+(\d+)\s*(minutes?|mins?|m)", 'minutes'),
    ]
    for patt, unit in patterns:
        m = re.search(patt, s)
        if m:
            val = int(m.group(1))
            return now + timedelta(**{unit: val})

    m = re.match(r"^(\d{1,2}):(\d{2})$", s)
    if m:
        hr, mn = map(int, m.groups())
        dt = now.replace(hour=hr, minute=mn, second=0, microsecond=0)
        if dt < now:
            dt += timedelta(days=1)
        return dt

    m = re.match(r"^(\d{1,2})\s+(—è–Ω–≤–∞—Ä—è|—Ñ–µ–≤—Ä–∞–ª—è|–º–∞—Ä—Ç–∞|–∞–ø—Ä–µ–ª—è|–º–∞—è|–∏—é–Ω—è|–∏—é–ª—è|–∞–≤–≥—É—Å—Ç–∞|—Å–µ–Ω—Ç—è–±—Ä—è|–æ–∫—Ç—è–±—Ä—è|–Ω–æ—è–±—Ä—è|–¥–µ–∫–∞–±—Ä—è)\s+(\d{1,2}):(\d{2})$", s)
    if m:
        day = int(m.group(1))
        month_str = m.group(2)
        hour = int(m.group(3))
        minute = int(m.group(4))
        month_map = {
            "—è–Ω–≤–∞—Ä—è": 1, "—Ñ–µ–≤—Ä–∞–ª—è": 2, "–º–∞—Ä—Ç–∞": 3, "–∞–ø—Ä–µ–ª—è": 4,
            "–º–∞—è": 5, "–∏—é–Ω—è": 6, "–∏—é–ª—è": 7, "–∞–≤–≥—É—Å—Ç–∞": 8,
            "—Å–µ–Ω—Ç—è–±—Ä—è": 9, "–æ–∫—Ç—è–±—Ä—è": 10, "–Ω–æ—è–±—Ä—è": 11, "–¥–µ–∫–∞–±—Ä—è": 12
        }
        month = month_map[month_str]
        year = now.year
        dt = datetime(year, month, day, hour, minute)
        if dt < now:
            dt = dt.replace(year=year + 1)
        return dt

    return None

# === Handlers ===

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=start_menu)

async def handle_start_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "new":
        return await new_reminder(update, context)
    return await list_reminders(update, context)

async def new_reminder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.callback_query:
        msg = update.callback_query.message
    else:
        msg = update.message
    await msg.reply_text("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:", reply_markup=persistent_kb)
    return GET_TEXT

async def get_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text_input = update.message.text
    if text_input in ["üìã –°–ø–∏—Å–æ–∫", "üìù –ù–æ–≤–æ–µ"]:
        return await list_reminders(update, context)
    context.user_data['text'] = text_input
    await update.message.reply_text("‚è± –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, '—á–µ—Ä–µ–∑ 20 –º–∏–Ω—É—Ç', '14:30', '1 –∏—é–ª—è 13:00'):", reply_markup=persistent_kb)
    return GET_TIME

async def get_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    dt = parse_time_string(update.message.text)
    if not dt:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤—Ä–µ–º—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return GET_TIME
    context.user_data['time'] = dt

    effects = ["‚è∞","üìå","üî•","üéØ","üí°","üöÄ","‚úÖ","üìû","üß†"]
    rows = [[InlineKeyboardButton(e, callback_data=f"effect_{e}") for e in effects[i:i+3]] for i in range(0, len(effects), 3)]
    kb = InlineKeyboardMarkup(rows)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —ç—Ñ—Ñ–µ–∫—Ç:", reply_markup=kb)
    return GET_EFFECT

async def get_effect(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    effect = query.data.split("_", 1)[1]
    user_id = query.from_user.id
    text = context.user_data['text']
    dt = context.user_data['time']
    iso = dt.isoformat()
    save_reminder(user_id, text, iso, effect)

    async def job():
        await context.bot.send_message(user_id, f"{effect} –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {text}")

    def job_wrapper():
        asyncio.create_task(job())

    scheduler.add_job(job_wrapper, 'date', run_date=dt)
    await query.edit_message_text("‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
    return ConversationHandler.END

async def list_reminders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.callback_query.message if update.callback_query else update.message
    if update.callback_query:
        await update.callback_query.answer()
    user_id = msg.chat.id
    now = datetime.now().isoformat()
    rows = []
    with sqlite3.connect(DB_FILE) as conn:
        for rid, text, t, effect in conn.execute("SELECT id,text,time,effect FROM reminders WHERE user_id=? AND time>? ORDER BY time", (user_id, now)):
            rows.append((rid, text, datetime.fromisoformat(t), effect))
    if not rows:
        await msg.reply_text("üì≠ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–µ—Ç.", reply_markup=start_menu)
        return ConversationHandler.END
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton(f"{text} –≤ {dt.strftime('%H:%M')}", callback_data=f"view_{rid}")]
        for rid, text, dt, effect in rows
    ])
    await msg.reply_text("üìù –í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:", reply_markup=kb)


# === Main function ===

async def main():
	init_db()
	application = Application.builder().token(TOKEN).build()

application.add_handler(CommandHandler("start", start))
application.add_handler(CallbackQueryHandler(handle_start_menu))
application.add_handler(ConversationHandler(
    entry_points=[CommandHandler("new", new_reminder), MessageHandler(filters.TEXT, get_text)],
    states={GET_TEXT: [MessageHandler(filters.TEXT, get_text)],
            GET_TIME: [MessageHandler(filters.TEXT, get_time)],
            GET_EFFECT: [CallbackQueryHandler(get_effect)]},
    fallbacks=[],
))

scheduler.start()
await application.run_polling()

if __name__ == '__main__':
	asyncio.run(main())

