import os
import logging
import re
from datetime import datetime, timedelta
from telegram import (
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    Update,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove,
)
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    CallbackQueryHandler,
    ConversationHandler,
    MessageHandler,
    filters,
)
import asyncio

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)

logger = logging.getLogger(__name__)

BOT_TOKEN = os.getenv("BOT_TOKEN")

# –≠—Ç–∞–ø—ã —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
(
    START_MENU,
    INPUT_DESCRIPTION,
    INPUT_TIME,
    SHOW_REMINDERS,
    CONFIRM_DELETE,
) = range(5)

reminders = {}  # {user_id: [{'desc': str, 'time': datetime, 'job_id': str}]}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
def get_main_menu():
    keyboard = [
        [InlineKeyboardButton("‚ûï –ù–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data="new_reminder")],
        [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π", callback_data="list_reminders")],
    ]
    return InlineKeyboardMarkup(keyboard)

# –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã –¥–ª—è –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è
def get_cancel_keyboard():
    keyboard = [[KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")]]
    return ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–º–µ–Ω—ã (—Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏)
def get_remove_keyboard():
    return ReplyKeyboardRemove()

# –§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏ (—É–ø—Ä–æ—â—ë–Ω–Ω–∞—è, –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä—è—Ç—å)
def parse_time_string(s: str) -> datetime | None:
    s = s.strip().lower()
    now = datetime.now()

    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è "—á–µ—Ä–µ–∑ N –º–∏–Ω—É—Ç/—á–∞—Å–æ–≤/–¥–Ω–µ–π"
    patterns = [
        (r"—á–µ—Ä–µ–∑\s+(\d+)\s*(–¥–Ω–µ–π|–¥–Ω—è|–¥–Ω)", 'days'),
        (r"—á–µ—Ä–µ–∑\s+(\d+)\s*(—á–∞—Å–æ–≤|—á–∞—Å–∞|—á)", 'hours'),
        (r"—á–µ—Ä–µ–∑\s+(\d+)\s*(–º–∏–Ω—É—Ç|–º–∏–Ω—É—Ç—ã|–º–∏–Ω|–º)", 'minutes'),
        (r"in\s+(\d+)\s*(days?|d)", 'days'),
        (r"in\s+(\d+)\s*(hours?|h)", 'hours'),
        (r"in\s+(\d+)\s*(minutes?|mins?|m)", 'minutes'),
    ]
    for patt, unit in patterns:
        m = re.search(patt, s)
        if m:
            val = int(m.group(1))
            return now + timedelta(**{unit: val})

    # –§–æ—Ä–º–∞—Ç HH:MM
    m = re.match(r"^(\d{1,2}):(\d{2})$", s)
    if m:
        hr, mn = map(int, m.groups())
        dt = now.replace(hour=hr, minute=mn, second=0, microsecond=0)
        if dt < now:
            dt += timedelta(days=1)
        return dt

    return None

# –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –º–µ–Ω—é
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message:
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_menu()
        )
    else:
        await update.callback_query.answer()
        await update.callback_query.message.edit_text(
            "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_menu()
        )
    return START_MENU

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def start_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "new_reminder":
        await query.message.reply_text(
            "–û—Ç–ø—Ä–∞–≤—å –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:",
            reply_markup=get_cancel_keyboard()
        )
        return INPUT_DESCRIPTION

    elif query.data == "list_reminders":
        user_id = query.from_user.id
        user_reminders = reminders.get(user_id, [])

        if not user_reminders:
            await query.message.edit_text(
                "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.",
                reply_markup=get_main_menu()
            )
            return START_MENU

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        buttons = [
            [InlineKeyboardButton(f"{idx+1}. {r['desc']} - {r['time'].strftime('%Y-%m-%d %H:%M')}", callback_data=f"del_{idx}")]
            for idx, r in enumerate(user_reminders)
        ]
        buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")])
        await query.message.edit_text(
            "–¢–≤–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–Ω–∞–∂–º–∏ —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å):",
            reply_markup=InlineKeyboardMarkup(buttons)
        )
        return SHOW_REMINDERS

    elif query.data == "back_to_menu":
        await query.message.edit_text(
            "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_menu()
        )
        return START_MENU

# –û—Ç–º–µ–Ω–∞ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è
async def cancel_input_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await update.message.reply_text(
            "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=get_main_menu()
        )
        return START_MENU
    else:
        # –ï—Å–ª–∏ –Ω–µ –æ—Ç–º–µ–Ω–∞ ‚Äî —ç—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ
        context.user_data['description'] = text
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.\n–ü—Ä–∏–º–µ—Ä—ã:\n- —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç\n- 14:30\n- —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞",
            reply_markup=get_remove_keyboard()
        )
        return INPUT_TIME

# –í–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
async def input_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    dt = parse_time_string(text)
    if not dt:
        await update.message.reply_text(
            "–ù–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤—Ä–µ–º—è. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.\n–ü—Ä–∏–º–µ—Ä: —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç, 14:30, —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞"
        )
        return INPUT_TIME

    desc = context.user_data.get('description')
    user_id = update.message.from_user.id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    reminder = {'desc': desc, 'time': dt}
    reminders.setdefault(user_id, []).append(reminder)

    await update.message.reply_text(
        f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:\n¬´{desc}¬ª –≤ {dt.strftime('%Y-%m-%d %H:%M')}",
        reply_markup=get_main_menu()
    )
    return START_MENU

# –£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ –∫–Ω–æ–ø–∫–µ
async def delete_reminder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    user_reminders = reminders.get(user_id, [])

    # –ò–Ω–¥–µ–∫—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ callback_data: del_0, del_1 ...
    idx = int(query.data.split('_')[1])

    if 0 <= idx < len(user_reminders):
        removed = user_reminders.pop(idx)
        await query.message.edit_text(
            f"–£–¥–∞–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:\n¬´{removed['desc']}¬ª",
            reply_markup=get_main_menu()
        )
    else:
        await query.message.edit_text(
            "–û—à–∏–±–∫–∞: –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
            reply_markup=get_main_menu()
        )

    return START_MENU

async def unknown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("start", start),
            CallbackQueryHandler(start_menu_handler, pattern="^(new_reminder|list_reminders|back_to_menu)$")
        ],
        states={
            START_MENU: [
                CallbackQueryHandler(start_menu_handler, pattern="^(new_reminder|list_reminders|back_to_menu)$"),
            ],
            INPUT_DESCRIPTION: [
                MessageHandler(filters.TEXT & (~filters.COMMAND), cancel_input_description)
            ],
            INPUT_TIME: [
                MessageHandler(filters.TEXT & (~filters.COMMAND), input_time)
            ],
            SHOW_REMINDERS: [
                CallbackQueryHandler(delete_reminder, pattern="^del_\\d+$"),
                CallbackQueryHandler(start_menu_handler, pattern="^back_to_menu$")
            ],
        },
        fallbacks=[
            CommandHandler("start", start)  # üëà –¥–æ–±–∞–≤–∏–ª–∏ —Å—é–¥–∞
        ],
        per_message=False,
    )

    app.add_handler(conv_handler)

    # –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    app.add_handler(MessageHandler(filters.COMMAND, unknown))

    print("Bot started...")
    app.run_polling()


if __name__ == "__main__":
    main()

