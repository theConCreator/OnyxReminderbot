import asyncio
import logging
import os
import sqlite3
import re
from datetime import datetime, timedelta

from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# === SETTINGS ===
TOKEN = os.environ["BOT_TOKEN"]
DB_FILE = "reminders.db"
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
scheduler = AsyncIOScheduler()

# === STATES ===
GET_TEXT, GET_TIME, GET_EFFECT = range(3)

# === KEYBOARDS ===
start_menu = InlineKeyboardMarkup([
    [InlineKeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data="new")],
    [InlineKeyboardButton("üìã –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="list")],
])

persistent_kb = ReplyKeyboardMarkup(
    [["üìù –ù–æ–≤–æ–µ", "üìã –°–ø–∏—Å–æ–∫"]],
    resize_keyboard=True
)

# === DB ===
def init_db():
    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            CREATE TABLE IF NOT EXISTS reminders (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                text TEXT,
                time TEXT,
                effect TEXT
            )
        """)

def save_reminder(user_id, text, iso_time, effect):
    with sqlite3.connect(DB_FILE) as conn:
        cur = conn.execute(
            "INSERT INTO reminders (user_id, text, time, effect) VALUES (?, ?, ?, ?)",
            (user_id, text, iso_time, effect)
        )
        conn.commit()
        return cur.lastrowid

# === TIME PARSING ===
def parse_time_string(s: str) -> datetime | None:
    s = s.strip().lower()
    now = datetime.now()
    patterns = [
        (r"—á–µ—Ä–µ–∑\s+(\d+)\s*(–¥–Ω–µ–π|–¥–Ω—è|–¥–Ω)", 'days'),
        (r"—á–µ—Ä–µ–∑\s+(\d+)\s*(—á–∞—Å–æ–≤|—á–∞—Å–∞|—á)", 'hours'),
        (r"—á–µ—Ä–µ–∑\s+(\d+)\s*(–º–∏–Ω—É—Ç|–º–∏–Ω—É—Ç—ã|–º–∏–Ω|–º)", 'minutes'),
        (r"in\s+(\d+)\s*(days?|d)", 'days'),
        (r"in\s+(\d+)\s*(hours?|h)", 'hours'),
        (r"in\s+(\d+)\s*(minutes?|mins?|m)", 'minutes'),
    ]
    for patt, unit in patterns:
        m = re.search(patt, s)
        if m:
            val = int(m.group(1))
            return now + timedelta(**{unit: val})

    # HH:MM
    m = re.match(r"^(\d{1,2}):(\d{2})$", s)
    if m:
        hr, mn = map(int, m.groups())
        dt = now.replace(hour=hr, minute=mn, second=0, microsecond=0)
        if dt < now:
            dt += timedelta(days=1)
        return dt

    # YYYY-MM-DD HH:MM
    m = re.match(r"^(\d{4}-\d{2}-\d{2})[ T](\d{2}:\d{2})$", s)
    if m:
        return datetime.fromisoformat(f"{m.group(1)}T{m.group(2)}")

    return None

# === HANDLERS ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=start_menu)

async def handle_start_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "new":
        return await new_reminder(query, context)
    return await list_reminders(query, context)

async def new_reminder(update, context: ContextTypes.DEFAULT_TYPE):
    if update.callback_query:
        await update.callback_query.answer()
        msg = update.callback_query.message
    else:
        msg = update.message
    await msg.reply_text("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:", reply_markup=persistent_kb)
    return GET_TEXT

async def get_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text in ["üìã –°–ø–∏—Å–æ–∫", "üìù –ù–æ–≤–æ–µ"]:
        return await list_reminders(update, context)
    context.user_data['text'] = text
    await update.message.reply_text("‚è± –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä. 20:30, —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞, in 10 min):", reply_markup=persistent_kb)
    return GET_TIME

async def get_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    dt = parse_time_string(update.message.text)
    if not dt:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return GET_TIME
    context.user_data['time'] = dt
    effects = ["‚è∞","üìå","üî•","üéØ","üí°","üöÄ","‚úÖ","üìû","üß†"]
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton(e, callback_data=f"effect_{e}") for e in effects[i:i+3]]
        for i in range(0, len(effects), 3)
    ])
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —ç—Ñ—Ñ–µ–∫—Ç:", reply_markup=kb)
    return GET_EFFECT

async def get_effect(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    effect = query.data.split("_", 1)[1]
    user_id = query.from_user.id
    text = context.user_data['text']
    dt = context.user_data['time']
    save_reminder(user_id, text, dt.isoformat(), effect)

    async def job():
        await context.bot.send_message(user_id, f"{effect} –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {text}")
    scheduler.add_job(job, 'date', run_date=dt)

    await query.edit_message_text("‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
    return ConversationHandler.END

async def list_reminders(update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.callback_query.message if hasattr(update, 'callback_query') else update.message
    if hasattr(update, 'callback_query'):
        await update.callback_query.answer()
    user_id = msg.chat.id
    now = datetime.now().isoformat()
    with sqlite3.connect(DB_FILE) as conn:
        reminders = conn.execute(
            "SELECT id, text, time, effect FROM reminders WHERE user_id=? AND time>?", (user_id, now)
        ).fetchall()
    if not reminders:
        await msg.reply_text("üì≠ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–µ—Ç.", reply_markup=start_menu)
        return ConversationHandler.END
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton(f"{t} –≤ {datetime.fromisoformat(tm).strftime('%H:%M')}", callback_data=f"view_{rid}")]
        for rid, t, tm, e in reminders
    ])
    await msg.reply_text("üìã –í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:", reply_markup=kb)
    return ConversationHandler.END

async def reminder_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    rid = int(query.data.split("_")[1])
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{rid}")],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back")]
    ])
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)

async def delete_rem(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    rid = int(query.data.split("_")[1])
    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("DELETE FROM reminders WHERE id=?", (rid,))
    await query.answer("–£–¥–∞–ª–µ–Ω–æ")
    await query.edit_message_text("‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.", reply_markup=start_menu)

async def back_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    await update.callback_query.edit_message_text("üìã –ú–µ–Ω—é", reply_markup=start_menu)

# === MAIN ===
async def main():
    init_db()
    scheduler.start()
    app = ApplicationBuilder().token(TOKEN).build()

    conv = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(handle_start_menu, pattern="^(new|list)$"),
            CommandHandler("start", start),
            MessageHandler(filters.Regex("^üìù –ù–æ–≤–æ–µ$"), new_reminder),
            MessageHandler(filters.Regex("^üìã –°–ø–∏—Å–æ–∫$"), list_reminders),
        ],
        states={
            GET_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_text)],
            GET_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_time)],
            GET_EFFECT: [CallbackQueryHandler(get_effect, pattern="^effect_")],
        },
        fallbacks=[],
        per_chat=True
    )

    app.add_handler(conv)
    app.add_handler(CallbackQueryHandler(reminder_action, pattern="^view_"))
    app.add_handler(CallbackQueryHandler(delete_rem, pattern="^delete_"))
    app.add_handler(CallbackQueryHandler(back_to_menu, pattern="^back$"))

    logger.info("Bot started...")
    await app.run_polling()

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())

